// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique
  name                   String
  avatar                 String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  tokens                 Token[]
  posts                  Post[]
  postComments           PostComment[]
  postThumbs             PostThumb[]
  postCommentThumbs      PostCommentThumb[]
  postCommentReplyThumbs PostCommentReplyThumb[]
  writtenReplies         PostCommentReply[]      @relation(name: "writtenReplies")
  receivedReplies        PostCommentReply[]      @relation(name: "receivedReplies")
  objectives             Objective[]
  keyResults             KeyResult[]
  initiatives            Initiative[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  title                  String
  content                String                  @db.LongText
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  category               String
  postComments           PostComment[]
  postThumbs             PostThumb[]
  postCommentThumbs      PostCommentThumb[]
  postCommentReplies     PostCommentReply[]
  postCommentReplyThumbs PostCommentReplyThumb[]
}

model PostThumb {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model PostComment {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  content                String                  @db.MediumText
  post                   Post                    @relation(fields: [postId], references: [id])
  postId                 Int
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  postCommentReplyThumbs PostCommentReplyThumb[]
  postCommentReplies     PostCommentReply[]
  postCommentThumbs      PostCommentThumb[]
}

model PostCommentThumb {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  post          Post        @relation(fields: [postId], references: [id])
  postId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  postCommnet   PostComment @relation(fields: [postCommentId], references: [id])
  postCommentId Int
}

model PostCommentReply {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  content                String                  @db.MediumText
  PostComment            PostComment             @relation(fields: [postCommentId], references: [id])
  postCommentId          Int
  post                   Post                    @relation(fields: [postId], references: [id])
  postId                 Int
  postCommentReplyThumbs PostCommentReplyThumb[]
  createdBy              User                    @relation(name: "writtenReplies", fields: [createdById], references: [id], onDelete: Cascade)
  createdById            Int
  createdFor             User                    @relation(name: "receivedReplies", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId           Int
}

model PostCommentReplyThumb {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  post               Post             @relation(fields: [postId], references: [id])
  postId             Int
  postComment        PostComment      @relation(fields: [postCommentId], references: [id])
  postCommentId      Int
  postCommentReply   PostCommentReply @relation(fields: [postCommentReplyId], references: [id])
  postCommentReplyId Int
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
}

model Objective {
  id         Int         @id @default(autoincrement())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  keyResults KeyResult[]
  deadline   DateTime
  hasDone    Boolean
}

model KeyResult {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Objective   Objective    @relation(fields: [objectiveId], references: [id])
  objectiveId Int
  initiatives Initiative[]
  deadline    DateTime
  hasDone     Boolean
}

model Initiative {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id])
  keyResultId Int
  deadline    DateTime
  hasDone     Boolean
}
